
TheButtonGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000be  008000be  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db3  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a23  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cc  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c9  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae eb       	ldi	r26, 0xBE	; 190
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3c       	cpi	r26, 0xCB	; 203
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 01 	call	0x284	; 0x284 <main>
  8a:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BTN_Init>:
			state[BtnId]=OFF;
		}
		break;
	}
	return output;
}
  92:	e6 ec       	ldi	r30, 0xC6	; 198
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
  98:	11 82       	std	Z+1, r1	; 0x01
  9a:	08 95       	ret

0000009c <ButtonPressed>:
char Pressed[ BTNS_NUMBER];
int Pressed_Confidence_Level[ BTNS_NUMBER]; //Measure button press cofidence
int Released_Confidence_Level[ BTNS_NUMBER]; //Measure button release confidence

char ButtonPressed(unsigned char BtnId)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	if (GPIO_Read(BTN_Config[BtnId]))
  a0:	c8 2f       	mov	r28, r24
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	fe 01       	movw	r30, r28
  a6:	e0 56       	subi	r30, 0x60	; 96
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	80 81       	ld	r24, Z
  ac:	0e 94 01 01 	call	0x202	; 0x202 <GPIO_Read>
  b0:	88 23       	and	r24, r24
  b2:	21 f1       	breq	.+72     	; 0xfc <ButtonPressed+0x60>
	{
		Pressed_Confidence_Level[BtnId] ++; //Increase Pressed Conficence
  b4:	9e 01       	movw	r18, r28
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	f9 01       	movw	r30, r18
  bc:	ee 53       	subi	r30, 0x3E	; 62
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 81       	ld	r24, Z
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	91 83       	std	Z+1, r25	; 0x01
  c8:	80 83       	st	Z, r24
		Released_Confidence_Level[BtnId] = 0; //Reset released button confidence since there is a button press
  ca:	f9 01       	movw	r30, r18
  cc:	e2 54       	subi	r30, 0x42	; 66
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	11 82       	std	Z+1, r1	; 0x01
  d2:	10 82       	st	Z, r1
		if (Pressed_Confidence_Level[BtnId] > confidenceLevel) //Indicator of good button press
  d4:	89 3c       	cpi	r24, 0xC9	; 201
  d6:	91 05       	cpc	r25, r1
  d8:	7c f1       	brlt	.+94     	; 0x138 <ButtonPressed+0x9c>
		{
			if (Pressed[BtnId] == 0)
  da:	fe 01       	movw	r30, r28
  dc:	e8 53       	subi	r30, 0x38	; 56
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	03 c0       	rjmp	.+6      	; 0xec <ButtonPressed+0x50>
			{
				Pressed[BtnId] = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
				return 1;
  ea:	29 c0       	rjmp	.+82     	; 0x13e <ButtonPressed+0xa2>
			}
			//Zero it so a new pressed condition can be evaluated
			Pressed_Confidence_Level[BtnId] = 0;
  ec:	cc 0f       	add	r28, r28
  ee:	dd 1f       	adc	r29, r29
  f0:	ce 53       	subi	r28, 0x3E	; 62
  f2:	df 4f       	sbci	r29, 0xFF	; 255
  f4:	19 82       	std	Y+1, r1	; 0x01
  f6:	18 82       	st	Y, r1
		{
			Pressed[BtnId] = 0;
			Released_Confidence_Level[BtnId] = 0;
		}
	}
	return 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	21 c0       	rjmp	.+66     	; 0x13e <ButtonPressed+0xa2>
			Pressed_Confidence_Level[BtnId] = 0;
		}
	}
	else
	{
		Released_Confidence_Level[BtnId] ++; //This works just like the pressed
  fc:	9e 01       	movw	r18, r28
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	f9 01       	movw	r30, r18
 104:	e2 54       	subi	r30, 0x42	; 66
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
		Pressed_Confidence_Level[BtnId] = 0; //Reset pressed button confidence since the button is released
 112:	f9 01       	movw	r30, r18
 114:	ee 53       	subi	r30, 0x3E	; 62
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	11 82       	std	Z+1, r1	; 0x01
 11a:	10 82       	st	Z, r1
		if (Released_Confidence_Level[BtnId] > confidenceLevel)
 11c:	89 3c       	cpi	r24, 0xC9	; 201
 11e:	91 05       	cpc	r25, r1
 120:	6c f0       	brlt	.+26     	; 0x13c <ButtonPressed+0xa0>
		{
			Pressed[BtnId] = 0;
 122:	fe 01       	movw	r30, r28
 124:	e8 53       	subi	r30, 0x38	; 56
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	10 82       	st	Z, r1
			Released_Confidence_Level[BtnId] = 0;
 12a:	e9 01       	movw	r28, r18
 12c:	c2 54       	subi	r28, 0x42	; 66
 12e:	df 4f       	sbci	r29, 0xFF	; 255
 130:	19 82       	std	Y+1, r1	; 0x01
 132:	18 82       	st	Y, r1
		}
	}
	return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	03 c0       	rjmp	.+6      	; 0x13e <ButtonPressed+0xa2>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	01 c0       	rjmp	.+2      	; 0x13e <ButtonPressed+0xa2>
 13c:	80 e0       	ldi	r24, 0x00	; 0
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <GPIO_Init>:
#define PORT(CH_ID) *((volatile unsigned char*)(0x3b - (3*CH_ID) - 0x00))
#define DDR(CH_ID) *((volatile unsigned char*)(0x3b - (3*CH_ID) - 0x01))
#define PIN(CH_ID) *((volatile unsigned char*)(0x3b - (3*CH_ID) - 0x02))
extern GPIO_ConfigType GPIO_Param[GROUPS_NUM];
void GPIO_Init(void)
{
 144:	e0 e6       	ldi	r30, 0x60	; 96
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	20 ea       	ldi	r18, 0xA0	; 160
 14a:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	for(i = 0; i < GROUPS_NUM; i++)
	{
		DDR(GPIO_Param[i].PortId) |= (GPIO_Param[i].GroupMask & GPIO_Param[i].GroupDir);
 14c:	a0 81       	ld	r26, Z
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	cd 01       	movw	r24, r26
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	a8 0f       	add	r26, r24
 158:	b9 1f       	adc	r27, r25
 15a:	b1 95       	neg	r27
 15c:	a1 95       	neg	r26
 15e:	b1 09       	sbc	r27, r1
 160:	da 96       	adiw	r26, 0x3a	; 58
 162:	9c 91       	ld	r25, X
 164:	da 97       	sbiw	r26, 0x3a	; 58
 166:	41 81       	ldd	r20, Z+1	; 0x01
 168:	82 81       	ldd	r24, Z+2	; 0x02
 16a:	84 23       	and	r24, r20
 16c:	89 2b       	or	r24, r25
 16e:	da 96       	adiw	r26, 0x3a	; 58
 170:	8c 93       	st	X, r24
		PORT(GPIO_Param[i].PortId) |= (GPIO_Param[i].GroupMask & GPIO_Param[i].UsePullUp) & (~GPIO_Param[i].GroupDir) ;
 172:	a0 81       	ld	r26, Z
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	cd 01       	movw	r24, r26
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	a8 0f       	add	r26, r24
 17e:	b9 1f       	adc	r27, r25
 180:	b1 95       	neg	r27
 182:	a1 95       	neg	r26
 184:	b1 09       	sbc	r27, r1
 186:	db 96       	adiw	r26, 0x3b	; 59
 188:	4c 91       	ld	r20, X
 18a:	db 97       	sbiw	r26, 0x3b	; 59
 18c:	91 81       	ldd	r25, Z+1	; 0x01
 18e:	83 81       	ldd	r24, Z+3	; 0x03
 190:	89 23       	and	r24, r25
 192:	92 81       	ldd	r25, Z+2	; 0x02
 194:	90 95       	com	r25
 196:	89 23       	and	r24, r25
 198:	84 2b       	or	r24, r20
 19a:	db 96       	adiw	r26, 0x3b	; 59
 19c:	8c 93       	st	X, r24
 19e:	34 96       	adiw	r30, 0x04	; 4
#define PIN(CH_ID) *((volatile unsigned char*)(0x3b - (3*CH_ID) - 0x02))
extern GPIO_ConfigType GPIO_Param[GROUPS_NUM];
void GPIO_Init(void)
{
	int i;
	for(i = 0; i < GROUPS_NUM; i++)
 1a0:	e2 17       	cp	r30, r18
 1a2:	f3 07       	cpc	r31, r19
 1a4:	99 f6       	brne	.-90     	; 0x14c <GPIO_Init+0x8>
	{
		DDR(GPIO_Param[i].PortId) |= (GPIO_Param[i].GroupMask & GPIO_Param[i].GroupDir);
		PORT(GPIO_Param[i].PortId) |= (GPIO_Param[i].GroupMask & GPIO_Param[i].UsePullUp) & (~GPIO_Param[i].GroupDir) ;
	}
	
}
 1a6:	08 95       	ret

000001a8 <GPIO_Write>:
void GPIO_Write(unsigned char Data, unsigned char GroupId)
{
	PORT(GPIO_Param[GroupId].PortId) &=~(GPIO_Param[GroupId].GroupMask);
 1a8:	e6 2f       	mov	r30, r22
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e0 5a       	subi	r30, 0xA0	; 160
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	a0 81       	ld	r26, Z
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	9d 01       	movw	r18, r26
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	a2 0f       	add	r26, r18
 1c4:	b3 1f       	adc	r27, r19
 1c6:	b1 95       	neg	r27
 1c8:	a1 95       	neg	r26
 1ca:	b1 09       	sbc	r27, r1
 1cc:	db 96       	adiw	r26, 0x3b	; 59
 1ce:	2c 91       	ld	r18, X
 1d0:	db 97       	sbiw	r26, 0x3b	; 59
 1d2:	91 81       	ldd	r25, Z+1	; 0x01
 1d4:	90 95       	com	r25
 1d6:	92 23       	and	r25, r18
 1d8:	db 96       	adiw	r26, 0x3b	; 59
 1da:	9c 93       	st	X, r25
	PORT(GPIO_Param[GroupId].PortId) |= (Data & GPIO_Param[GroupId].GroupMask);
 1dc:	a0 81       	ld	r26, Z
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	9d 01       	movw	r18, r26
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	a2 0f       	add	r26, r18
 1e8:	b3 1f       	adc	r27, r19
 1ea:	b1 95       	neg	r27
 1ec:	a1 95       	neg	r26
 1ee:	b1 09       	sbc	r27, r1
 1f0:	db 96       	adiw	r26, 0x3b	; 59
 1f2:	9c 91       	ld	r25, X
 1f4:	db 97       	sbiw	r26, 0x3b	; 59
 1f6:	21 81       	ldd	r18, Z+1	; 0x01
 1f8:	82 23       	and	r24, r18
 1fa:	98 2b       	or	r25, r24
 1fc:	db 96       	adiw	r26, 0x3b	; 59
 1fe:	9c 93       	st	X, r25
 200:	08 95       	ret

00000202 <GPIO_Read>:
}

unsigned char GPIO_Read(unsigned char GroupId)
{
	return 	PIN(GPIO_Param[GroupId].PortId) & GPIO_Param[GroupId].GroupMask;
 202:	24 e0       	ldi	r18, 0x04	; 4
 204:	82 9f       	mul	r24, r18
 206:	c0 01       	movw	r24, r0
 208:	11 24       	eor	r1, r1
 20a:	dc 01       	movw	r26, r24
 20c:	a0 5a       	subi	r26, 0xA0	; 160
 20e:	bf 4f       	sbci	r27, 0xFF	; 255
 210:	2c 91       	ld	r18, X
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	2e 0f       	add	r18, r30
 21c:	3f 1f       	adc	r19, r31
 21e:	ee 27       	eor	r30, r30
 220:	ff 27       	eor	r31, r31
 222:	e2 1b       	sub	r30, r18
 224:	f3 0b       	sbc	r31, r19
 226:	91 ad       	ldd	r25, Z+57	; 0x39
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	8c 91       	ld	r24, X
 22c:	89 23       	and	r24, r25
 22e:	08 95       	ret

00000230 <LED_TurnOn>:
extern const LED_ConfigType LED_Config[LEDS_NUMBER];

unsigned char data;
void LED_TurnOn(unsigned char LedId){

	data =  LED_Config[LedId].Connection;
 230:	e8 2f       	mov	r30, r24
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	ee 55       	subi	r30, 0x5E	; 94
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	81 81       	ldd	r24, Z+1	; 0x01
 23e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <data>
	GPIO_Write(data,LED_Config[LedId].LedGroupId);
 242:	60 81       	ld	r22, Z
 244:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <GPIO_Write>
 248:	08 95       	ret

0000024a <LED_TurnOff>:
}

void LED_TurnOff(unsigned char LedId){
	data = ~(LED_Config[LedId].Connection);
 24a:	e8 2f       	mov	r30, r24
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	ee 55       	subi	r30, 0x5E	; 94
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	81 81       	ldd	r24, Z+1	; 0x01
 258:	80 95       	com	r24
 25a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <data>
	GPIO_Write(data,LED_Config[LedId].LedGroupId);
 25e:	60 81       	ld	r22, Z
 260:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <GPIO_Write>
 264:	08 95       	ret

00000266 <LED_Toggle>:
}

void LED_Toggle(unsigned char LedId){
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
	unsigned char previous_data = GPIO_Read(LedId);
 26a:	0e 94 01 01 	call	0x202	; 0x202 <GPIO_Read>
	if(previous_data==0)
 26e:	81 11       	cpse	r24, r1
 270:	04 c0       	rjmp	.+8      	; 0x27a <LED_Toggle+0x14>
	LED_TurnOn(LedId);
 272:	8c 2f       	mov	r24, r28
 274:	0e 94 18 01 	call	0x230	; 0x230 <LED_TurnOn>
 278:	03 c0       	rjmp	.+6      	; 0x280 <LED_Toggle+0x1a>
	else
	LED_TurnOff(LedId);
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 25 01 	call	0x24a	; 0x24a <LED_TurnOff>
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:
#include "LED.h"


int main(void)
{
	MCUCSR = (1<<JTD);
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
 288:	84 bf       	out	0x34, r24	; 52
	GPIO_Init();
 28a:	0e 94 a2 00 	call	0x144	; 0x144 <GPIO_Init>
	BTN_Init();
 28e:	0e 94 49 00 	call	0x92	; 0x92 <BTN_Init>
	int i=0,j=7;
 292:	07 e0       	ldi	r16, 0x07	; 7
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
	int Pressed = 0;
	int Pressed_Confidence_Level = 0; //Measure button press cofidence
	int Released_Confidence_Level = 0; //Measure button release confidence
	while(1){
		if(ButtonPressed(0))
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 4e 00 	call	0x9c	; 0x9c <ButtonPressed>
 2a0:	88 23       	and	r24, r24
 2a2:	21 f0       	breq	.+8      	; 0x2ac <main+0x28>
		{
			LED_TurnOn(i);
 2a4:	8c 2f       	mov	r24, r28
 2a6:	0e 94 18 01 	call	0x230	; 0x230 <LED_TurnOn>
			i++;
 2aa:	21 96       	adiw	r28, 0x01	; 1
		}
		if (ButtonPressed(1))
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 4e 00 	call	0x9c	; 0x9c <ButtonPressed>
 2b2:	88 23       	and	r24, r24
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <main+0x3c>
		{
			LED_TurnOn(j);
 2b6:	80 2f       	mov	r24, r16
 2b8:	0e 94 18 01 	call	0x230	; 0x230 <LED_TurnOn>
			j++;
 2bc:	0f 5f       	subi	r16, 0xFF	; 255
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(i==7 || j==14)
 2c0:	c7 30       	cpi	r28, 0x07	; 7
 2c2:	d1 05       	cpc	r29, r1
 2c4:	81 f0       	breq	.+32     	; 0x2e6 <main+0x62>
 2c6:	0e 30       	cpi	r16, 0x0E	; 14
 2c8:	11 05       	cpc	r17, r1
 2ca:	39 f7       	brne	.-50     	; 0x29a <main+0x16>
 2cc:	1a c0       	rjmp	.+52     	; 0x302 <main+0x7e>
			{
				int j=0;
				while(j<50)
				for(i=0;i<7;i++)
				{
					LED_Toggle(i);
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 33 01 	call	0x266	; 0x266 <LED_Toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	87 ea       	ldi	r24, 0xA7	; 167
 2d6:	91 e6       	ldi	r25, 0x61	; 97
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x54>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x5a>
 2de:	00 00       	nop
 2e0:	cf 5f       	subi	r28, 0xFF	; 255
		{
			if (i==7)
			{
				int j=0;
				while(j<50)
				for(i=0;i<7;i++)
 2e2:	c7 30       	cpi	r28, 0x07	; 7
 2e4:	a1 f7       	brne	.-24     	; 0x2ce <main+0x4a>
{
	MCUCSR = (1<<JTD);
	MCUCSR = (1<<JTD);
	GPIO_Init();
	BTN_Init();
	int i=0,j=7;
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	f2 cf       	rjmp	.-28     	; 0x2ce <main+0x4a>
			{
				int j=0;
				while(j<50)
				for(i=7;i<14;i++)
				{
					LED_Toggle(i);
 2ea:	8c 2f       	mov	r24, r28
 2ec:	0e 94 33 01 	call	0x266	; 0x266 <LED_Toggle>
 2f0:	87 ea       	ldi	r24, 0xA7	; 167
 2f2:	91 e6       	ldi	r25, 0x61	; 97
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x70>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x76>
 2fa:	00 00       	nop
 2fc:	cf 5f       	subi	r28, 0xFF	; 255
			}
			if (j==14)
			{
				int j=0;
				while(j<50)
				for(i=7;i<14;i++)
 2fe:	ce 30       	cpi	r28, 0x0E	; 14
 300:	a1 f7       	brne	.-24     	; 0x2ea <main+0x66>
{
	MCUCSR = (1<<JTD);
	MCUCSR = (1<<JTD);
	GPIO_Init();
	BTN_Init();
	int i=0,j=7;
 302:	c7 e0       	ldi	r28, 0x07	; 7
 304:	f2 cf       	rjmp	.-28     	; 0x2ea <main+0x66>

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
